#!/usr/bin/env node

// ---------------------------------------------------------
// Load required packages 
// 2018-02-20 12:22
// ---------------------------------------------------------

let fs = require('fs');
let path = require('path');

// ---------------------------------------------------------
// Get arguments supplied to program
// 2018-02-20 12:23
// ---------------------------------------------------------

let componentName = process.argv[2];
let props = process.argv[3] || "" 

// ---------------------------------------------------------
// Define recursive function 
// 2018-02-20 12:23
// ---------------------------------------------------------
// Function deposits a payload inside a given folder into 
// a given file name. It also returns the path of the file.

const targetDeposit = (targetDir, currentDir, depositName, depositContent) => {
  if (targetDir === currentDir.split("/").slice(-1)[0]) {
    fs.writeFileSync(`${currentDir}/${depositName}`, depositContent);
    return `${currentDir}/${depositName}`;
  } else {
    try {
      let lowerDirContents = fs.readdirSync(currentDir);
      for (var i = 0; i < lowerDirContents.length; i++) {
        let result = targetDeposit(targetDir, path.resolve(currentDir + "/" + lowerDirContents[i]), depositName, depositContent);
        if (result) return result;
      }
    } catch(e) {
      // do nothing
    }
  }
}

// ---------------------------------------------------------
// Store Component boilerplate
// 2018-02-20 12:26
// ---------------------------------------------------------

let component = 
`import React from 'react';
import {
  BrowserRouter as Router,
  Route,
  NavLink,
  Link,
  Switch,
} from 'react-router-dom'

const ${componentName} = (${props}) => {
  
  return (
  
  );
}

export default ${componentName};
`
// ---------------------------------------------------------
// Deposit Component boilerplate
// 2018-02-20 12:29
// ---------------------------------------------------------
// Obtain full paths to both components and deposit the component in its correct folder

let pathToComponent = targetDeposit("components", process.env.PWD, `${componentName}.js`, component);
let pathToContainer = targetDeposit("containers", process.env.PWD, `${componentName}Container.js`, "placeholder");

// ---------------------------------------------------------
// Path manipulation
// 2018-02-20 12:27
// ---------------------------------------------------------
// Arrive at correct relative path from container to component so container can require component

// Change from paths to arrays of directories, for directory-by-directory path manipulation

let directoriesToComponent = pathToComponent.split("/");
let directoriesToContainer = pathToContainer.split("/");

let pathInCommon = "", uniqueToComponentPath = "", i = 0;
while (directoriesToComponent[i] === directoriesToContainer[i]) {
  pathInCommon += `${directoriesToComponent[i]}/`;
  i++;
}
for (let j = i; j < directoriesToComponent.length; j++) {
  uniqueToComponentPath += `${directoriesToComponent[j]}/`;
}
// lop off trailing "/"
uniqueToComponentPath = uniqueToComponentPath.substring(0, uniqueToComponentPath.length-1); 

directoriesToContainer.splice(-1); // lop off actual file
directoriesToContainer = directoriesToContainer.join("/");

let relativePathToCommon = path.relative(directoriesToContainer, pathInCommon);
// transform to "." if relative path is same directory
if (relativePathToCommon.length === 0) relativePathToCommon = ".";

let completePath = `${relativePathToCommon}/${uniqueToComponentPath}`

// ---------------------------------------------------------
// Store container boilerplate
// 2018-02-20 12:28
// ---------------------------------------------------------

let container = 
`import React, {Component} from 'react';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import ${componentName} from '${completePath}';

// optional  
import serialize from 'form-serialize';

let ${componentName}Container = (${props}) => {
  return ( 
    
  )
}

const mapStateToProps = (state, ownProps) => {
  return {

  }
}

const mapDispatchToProps = (dispatch, ownProps) => {
  return {

  }
}

const ${componentName}Container = withRouter(
  connect(mapStateToProps, mapDispatchToProps)(${componentName})
);

export default ${componentName}Container;

`

// ---------------------------------------------------------
// Deposit Container boilerplate
// 2018-02-20 12:28
// ---------------------------------------------------------

targetDeposit("containers", process.env.PWD, `${componentName}Container.js`, container);
